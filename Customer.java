import java.util.Random;
/**
 * This class represents a customer object with randomly generated values including
 * number of items, which then calculates the price of those items and the total time
 * taken by the customer, as well as the chance that a customer may have a scanning issue.
 */
public class Customer {
	private static int lastAssignedNumber = 0;
	private static final Random RANDOM = new Random();
	private int number;
	private int numberOfItems;
	private double priceOfItems;
	private boolean hasIssue;
	
	/**
	 * No arg constructor
	 */
	public Customer() {
		number = ++lastAssignedNumber;
		
		numberOfItems = RANDOM.nextInt(20) + 1;
		for (int i = 0; i < numberOfItems; i++) {
			priceOfItems += RANDOM.nextDouble() * 10;
		}
		hasIssue = RANDOM.nextDouble() < 0.2;
	}
	
	/*
	 * All accessor/mutator methods generated by PingPong
	 * Getter for customer number
	 * @return
	 * 	returns the customer number
	 */
	public int getNumber() {
        return number;
    }
	
	/**
	 * Getter for number of items
	 * @return
	 * 	returns the number of items
	 */
    public int getNumberOfItems() {
        return numberOfItems;
    }
    
    /**
     * Getter for the price of items
     * @return
     * 	returns a price per item which is then added up together to a final price
     */
    public double getPriceOfItems() {
        return priceOfItems;
    }

    /**
     * Represents if the customer has an issue or not
     * @return
     * 	a boolean value if the customer has an issue or not
     */
    public boolean hasIssue() {
        return hasIssue;
    }
    
    /**
     * Calculates the total time spent including initialization and payment time
     * @param initializationTime
     * 	time for scanning coupons and cards
     * @param timePerItem
     * 	time for scanning per item
     * @param fixTimePerIssue
     * 	time to fix an issue given a worker is present
     * @param paymentTime
     * 	time to pay for items
     * @return
     * 	the total time spent by a customer
     */
    public double totalTimeSpent(double initializationTime, double timePerItem, 
      double fixTimePerIssue, double paymentTime) 
    {
    	return initializationTime + (timePerItem * numberOfItems) + 
    	  (hasIssue ? fixTimePerIssue : 0) + paymentTime;
    }
    
    /**
     * Generated by PingPong
     * 
     * toString representation of the Customer object
     * @return
     * 	string representation of a customer
     */
    @Override
    public String toString() {
        return String.format("| Customer #%5d | %-2d item(s) | Total price: $%-6.2f |",
                             number, 
                             numberOfItems, 
                             priceOfItems );
    }
}
