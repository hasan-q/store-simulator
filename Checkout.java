import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
/**
 * This class represents a self-checkout object which is a queue. Includes ordinary methods
 * for a queue including enqueue, dequeue, peek and getSize.
 */
public class Checkout {
	private Queue<Customer> checkout;
	
	/**
	 * no arg constructor
	 */
	public Checkout() {
		checkout = new LinkedList<Customer>();
	}
	
	/**
	 * Generated by PingPong
	 * Getter method for customers
	 * @return
	 * 	the amount of customers inside a checkout object
	 */
	public List<Customer> getCustomers() {
		return new LinkedList<>(checkout);
	}
	
	/**
	 * Adds a customer to a checkout queue
	 * @param c
	 * 	the customer object being added
	 */
	public void enqueue(Customer c) {
		checkout.offer(c);
	}
	
	/**
	 * Removes a customer from the checkout queue
	 */
	public void dequeue() {
		checkout.poll();
	}
	
	/**
	 * Returns the customer at the end of the queue, represents the customer scanning items
	 * @return
	 * 	The customer at the end of the queue
	 */
	public Customer peek() {
		return checkout.peek();
	}
	
	/**
	 * Getter for the size of the queue
	 * @return
	 * 	how many customers are inside the queue
	 */
	public int getSize() {
		return checkout.size();
	}
	
	/**
	 * Partially generated by PingPong
	 * String representation of the checkout object
	 * Adds a marker to the front of the checkout queue for ease of viewing
	 * @return
	 * 	A string representation of a checkout object including all the customers in it
	 */
	@Override
	public String toString() {
		StringBuilder output = new StringBuilder();
		boolean isFirst = true;
		
		for (Customer c : checkout) {
			if (isFirst) {
				output.append(c.toString()).append(" <-- Front of Line").append("\n");
				isFirst = false;
			} else {
				output.append(c.toString()).append("\n");
			}
		}
		return output.toString();
	}
}
